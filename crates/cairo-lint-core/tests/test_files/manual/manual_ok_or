//! > test with comment in None

//! > cairo_code
fn main() {
    let foo: Option<i32> = Option::None;
    let _foo = match foo {
        Option::Some(v) => Result::Ok(v),
        Option::None =>{
            // do something
            Result::Err('this is an err')
        },
    };
}

//! > diagnostics
warning: Plugin diagnostic: Manual match for Option<T> or Result<T, E> detected. Consider using unwrap_or instead.
  --> lib.cairo:4:16
   |
 4 |       let _foo = match foo {
   |  ________________-
 5 | |         Option::Some(v) => Result::Ok(v),
...  |
 9 | |         },
10 | |     };
   | |_____-
   |

//! > fixed
fn main() {
    let foo: Option<i32> = Option::None;
    let _foo = foo.unwrap_or({
    // do something
    Result::Err('this is an err')
});
}

//! > ==========================================================================

//! > test with comment in Some

//! > cairo_code
fn main() {
    let foo: Option<i32> = Option::None;
    let _foo = match foo {
        Option::Some(v) => {
            // do something
            Result::Ok(v)
        },
        Option::None => Result::Err('this is an err'),
    };
}

//! > diagnostics
warning: Plugin diagnostic: Manual match for Option<T> or Result<T, E> detected. Consider using unwrap_or instead.
  --> lib.cairo:4:16
   |
 4 |       let _foo = match foo {
   |  ________________-
 5 | |         Option::Some(v) => {
...  |
 9 | |         Option::None => Result::Err('this is an err'),
10 | |     };
   | |_____-
   |

//! > fixed
fn main() {
    let foo: Option<i32> = Option::None;
    let _foo = foo.unwrap_or(Result::Err('this is an err'));
}
